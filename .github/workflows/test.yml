name: Test Suite

on:
  push:
    branches: [ main, develop, scheduling-agent ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black mypy bandit
    
    - name: Set up test environment
      run: |
        echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
        echo "TWILIO_ACCOUNT_SID=test-sid" >> $GITHUB_ENV
        echo "TWILIO_AUTH_TOKEN=test-token" >> $GITHUB_ENV
        echo "GOOGLE_PRIVATE_KEY=test-key" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_EMAIL=test@example.com" >> $GITHUB_ENV
        echo "GOOGLE_PROJECT_ID=test-project" >> $GITHUB_ENV
        echo "GOOGLE_CALENDAR_ID=test@example.com" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
    
    - name: Run linting
      run: |
        python -m black --check app/ tests/
    
    - name: Run type checking
      run: |
        python -m mypy app/ --ignore-missing-imports || true
    
    - name: Run unit tests
      run: |
        python -m pytest tests/test_unit.py -v --cov=app --cov-report=xml
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v --cov=app --cov-report=xml
    
    - name: Run API tests
      run: |
        python -m pytest tests/test_api.py -v --cov=app --cov-report=xml
    
    - name: Run E2E tests
      run: |
        python -m pytest tests/test_e2e.py -v --cov=app --cov-report=xml
    
    - name: Generate coverage report
      run: |
        python -m pytest tests/ --cov=app --cov-report=html --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Run security scan
      run: |
        python -m bandit -r app/ -f json -o security-report.json || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          security-report.json
          test-results.xml

  pre-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black mypy bandit
    
    - name: Set up test environment
      run: |
        echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
        echo "TWILIO_ACCOUNT_SID=test-sid" >> $GITHUB_ENV
        echo "TWILIO_AUTH_TOKEN=test-token" >> $GITHUB_ENV
        echo "GOOGLE_PRIVATE_KEY=test-key" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_EMAIL=test@example.com" >> $GITHUB_ENV
        echo "GOOGLE_PROJECT_ID=test-project" >> $GITHUB_ENV
        echo "GOOGLE_CALENDAR_ID=test@example.com" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
    
    - name: Run pre-deployment tests
      run: |
        python scripts/run_tests.py pre-deploy
    
    - name: Deploy to Vercel
      if: success()
      run: |
        echo "All tests passed! Ready for deployment."
        # Add Vercel deployment commands here if needed

